https://blog.ekbana.com/skew-correction-using-corner-detectors-and-homography-fda345e42e65
https://stackoverflow.com/questions/64860785/opencv-using-canny-and-shi-tomasi-to-detect-round-corners-of-a-playing-card
https://docs.opencv.org/4.x/d9/dab/tutorial_homography.html
https://stackoverflow.com/questions/22656698/perspective-correction-in-opencv-using-python
https://matplotlib.org/stable/users/explain/event_handling.html -> pay attention to the diff between event.x and event.xdata

using miniconda and numpy, opencv and matplotlib in Windows 10

can follow these steps:
> conda create --name homography opencv numpy matplotlib
> conda activate homography

notes:
with Shi-Tomasi and cv2.goodFeaturesToTrack(), it seems like it's only really effective for sharp corners and not rounded ones.

3d representation of building face after correction?
- use grayscaled image with high contrast, somehow create edges/segments based on dark lines? then form a mesh that way?
  or something like creating vertices for every sufficiently dark pixel (that'd be way extreme but maybe something like that)?